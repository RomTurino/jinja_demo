
from enum import Enum
import math
import random
from typing import Annotated, Literal

from fastapi import Body, FastAPI, HTTPException, Path
from fastapi.responses import JSONResponse
from pydantic import BaseModel, Field

available_types_of_animals = ["–∫–æ—Ç", "–ø—ë—Å", "—Ä—ã–±–∫–∞", "–ø–æ–ø—É–≥–∞–π", "—Ö–æ–º—è–∫", "–º–æ—Ä—Å–∫–∞—è —Å–≤–∏–Ω—å—è", "–æ–±—ã—á–Ω–∞—è —Å–≤–∏–Ω—å—è"]
example_user = lambda : {
                "name": f'–•–ª–æ–ø—á–∏–∫ ‚Ññ{random.randint(1,5)}',
                "rating": random.randint(1,25),
                "luck": random.randint(1, 10),
                "pet": {
                        "type":"–∫–æ—Ç",
                        "name": f"–ñ–∏–≤–æ—Ç–∏–Ω–∫–∞ {random.randint(1,5)}"
                    },
            }
   

class AnimalType(str, Enum):
    CAT = "–∫–æ—Ç"
    DOG = "–ø—ë—Å"
    SNAKE = "—Ä—ã–±–∫–∞"
    PARROT = "–ø–æ–ø—É–≥–∞–π"
    HUMSTER = "—Ö–æ–º—è–∫"
    GUINEA_PIG = "–º–æ—Ä—Å–∫–∞—è —Å–≤–∏–Ω—å—è"
    PIG = "–æ–±—ã—á–Ω–∞—è —Å–≤–∏–Ω—å—è"


class Pet(BaseModel):
    '''
    –ö–ª–∞—Å—Å –¥–æ–º–∞—à–Ω–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞

    * type - —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ ("–∫–æ—Ç", "–ø—ë—Å", "—Ä—ã–±–∫–∞", "–ø–æ–ø—É–≥–∞–π", "—Ö–æ–º—è–∫", "–º–æ—Ä—Å–∫–∞—è —Å–≤–∏–Ω—å—è", "–æ–±—ã—á–Ω–∞—è —Å–≤–∏–Ω—å—è")
    * name - –∫–ª–∏—á–∫–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ

    '''
    type: Annotated[
        AnimalType,
        Field(
            title="–¢–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ",
            description="–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∂–∏–≤–æ—Ç–Ω—ã—Ö",
            default=random.choice(list(AnimalType)),
        ),
    ]
    name: str = Field(title="–∫–ª–∏—á–∫–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ", examples=[f"–ñ–∏–≤–æ—Ç–∏–Ω–∫–∞ {random.randint(1,100)}"])


class User(BaseModel):
    '''
    –ö–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    * name - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    * rating - —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
    * luck - —É–¥–∞—á–∞ (–æ—Ç 1 –¥–æ 10)
    '''
    name: str = Field(title="–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", examples=[f"–•–ª–æ–ø—á–∏–∫ ‚Ññ{random.randint(1,5)}"])
    rating: int = Field(title="—Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", default=random.randint(1,25))
    luck: int = Field(title="—É–¥–∞—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", default=random.randint(1,10))
    pet:Pet

    

users = [
    {
        "name": f'–•–ª–æ–ø—á–∏–∫ ‚Ññ{num}',
        "rating": math.factorial(num),
        "luck": random.randint(num, 10),
        "pet" : {
            "type": random.choice(list(AnimalType)),
            "name": f"–ñ–∏–≤–æ—Ç–∏–Ω–∫–∞ {num}"
        }
    }
    for num in range(1, 6)]




app = FastAPI(
    title="UrbanPeople API",
    description="UrbanPeople API helps you to work with the list of people in CPU memory. üöÄ",
    version="0.0.1",
    contact={
        "name": "Urban University",
        "url": "https://urban-university.ru/#consult",
        "email": "help@it-university.pro",
    },
    license_info={
        "name": "Apache 2.0",
        "identifier": "MIT",
    },
    openapi_tags=[
        {
            "name": "users",
            "description": "Operations with users."
        },
        {
            "name":"pets",
            "description": "operations with pets"
        }
    ]
)


@app.get("/", tags=["users"])
def get_all_items():
    '''
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    '''
    
    return JSONResponse(content=users, media_type="application/json; charset=utf-8")


@app.get("/pets", tags=["pets"])
def get_all_pets():
    '''
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Å–æ –≤—Å–µ–º–∏ –¥–æ–º–∞—à–Ω–∏–º–∏ –∂–∏–≤–æ—Ç–Ω—ã–º–∏
    '''
    return [user["pet"] for user in users]


@app.get("/available_pets", tags=["pets"])
def get_all_pets():
    '''
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ c –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∂–∏–≤–æ—Ç–Ω—ã–º–∏
    '''
    return list(AnimalType)


@app.post("/create", tags=["users"])
def create_person(
    user: Annotated[
            User,
            Body(
                examples=[
                    example_user()
                ]  # –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ),
        ]
    ):
    users.append(user.__dict__)
    return user.__dict__


@app.put("/update/{name}", tags=["users"])
def change_person_info(
        name: Annotated[
            str,
            Path(
                title="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                description="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å",
            ),
        ],
        user: Annotated[
            User,
            Body(
                examples=[example_user()]
            ),
        ]
    ):

    try:
        index = [user["name"] for user in users].index(name)
        users[index] = user.__dict__
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞"
    except Exception as e:
        raise HTTPException(status_code=404, detail="Person wasn't found")

@app.delete("/delete/{name}", tags=["users"])
def delete_person(
        name: Annotated[
            str,
            Path(
                title="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                description="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å",
            ),
        ]
    ):
    try:
        index = [user["name"] for user in users].index(name)
        deleted_user = users.pop(index)
        return deleted_user
    except Exception as e:
        raise HTTPException(status_code=404, detail="Person wasn't found")
    


